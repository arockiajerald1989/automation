import subprocess
import json
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import RLock, Lock
import logging
import multiprocessing
import time
import shlex
import shutil

# Setup logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

class GitRepositoryManager:
    def __init__(self, log_level=logging.INFO):
        """
        Initialize locks for thread safety and set log level.
        """
        self.repo_locks = {}
        self.repo_lock_global = Lock()
        log.setLevel(log_level)

    def run_command(self, cmd, cwd=None, timeout=120, retries=3):
        """
        Run a shell command in a specified directory with error handling.
        A timeout is enforced to prevent hanging.
        Retries with exponential backoff are included for transient errors.
        """
        attempt = 0
        backoff = 1  # initial backoff time in seconds

        while attempt < retries:
            try:
                log.debug(f"Running command: {cmd} in {cwd}")
                process = subprocess.run(shlex.split(cmd), check=True, cwd=cwd, stdout=subprocess.PIPE,
                                         stderr=subprocess.PIPE, timeout=timeout)
                output = process.stdout.decode().strip()
                log.debug(f"Command output: {output}")
                return output
            except subprocess.CalledProcessError as e:
                log.error(f"Error executing command: {cmd}. Attempt {attempt + 1} of {retries}")
                log.error(f"Error: {e.stderr.decode().strip()}")
                attempt += 1
                if attempt >= retries:
                    raise RuntimeError(f"Command failed after {retries} attempts: {cmd}")
                else:
                    time.sleep(backoff)  # exponential backoff before retrying
                    backoff *= 2  # double the backoff time for the next retry
            except subprocess.TimeoutExpired as e:
                log.error(f"Command timed out: {cmd} in {cwd}")
                raise RuntimeError(f"Command timed out: {cmd}")

    def get_current_branch(self, repo_path):
        """Get the current branch of a Git repository."""
        cmd = "git symbolic-ref --short HEAD"
        return self.run_command(cmd, cwd=repo_path)

    def is_up_to_date(self, repo_path, branch):
        """
        Check if the repository or submodule is up to date with its upstream.
        Handles cases where upstream may not be set.
        """
        try:
            local_commit = self.run_command("git rev-parse @", cwd=repo_path)
            upstream_commit = self.run_command("git rev-parse @{u}", cwd=repo_path)
            return local_commit == upstream_commit
        except subprocess.CalledProcessError as e:
            if "no upstream" in e.stderr.decode():
                log.warning(f"No upstream configured for {branch} in {repo_path}")
            else:
                log.warning(f"Failed to check upstream status for {branch}: {e.stderr.decode().strip()}")
            return False

    def clone_repository(self, repo_url, repo_name, depth=1):
        """
        Clone the repository if it doesn't exist, with an optional depth for shallow cloning.
        If the clone fails, the directory is removed and reattempted.
        """
        if not os.path.exists(repo_name):
            log.info(f"Cloning the repository: {repo_url}")
            try:
                self.run_command(f"git clone --depth {depth} {repo_url}")
            except RuntimeError:
                log.error(f"Clone failed for {repo_name}. Removing directory and retrying...")
                shutil.rmtree(repo_name, ignore_errors=True)
                raise
        else:
            log.info(f"Repository {repo_name} already exists. Skipping clone.")

    def checkout_and_pull(self, repo_path, branch):
        """
        Checkout and pull the branch if not up to date.
        Ensures thread safety using locks.
        """
        with self._get_repo_lock(repo_path):
            current_branch = self.get_current_branch(repo_path)
            if current_branch != branch:
                log.info(f"Checking out branch {branch} in {repo_path} (currently on {current_branch})")
                self.run_command(f"git checkout {branch}", cwd=repo_path)

            if not self.is_up_to_date(repo_path, branch):
                log.info(f"Pulling latest changes for branch {branch} in {repo_path}")
                self.run_command(f"git pull origin {branch}", cwd=repo_path)
            else:
                log.info(f"Branch {branch} in {repo_path} is up to date. Skipping pull.")

    def initialize_submodules(self, repo_path):
        """
        Initialize submodules if they haven't been initialized.
        Processes submodules in parallel to improve performance.
        """
        submodule_config = os.path.join(repo_path, '.gitmodules')
        if not os.path.exists(submodule_config):
            log.info(f"No submodules found in {repo_path}.")
            return False

        submodule_status = self.run_command("git submodule status", cwd=repo_path)
        if submodule_status:
            log.info(f"Submodules already initialized for {repo_path}. Skipping.")
            return False

        log.info(f"Initializing submodules for {repo_path}")
        self.run_command("git submodule update --init --recursive --jobs 4", cwd=repo_path)
        return True

    def process_repository(self, repo):
        """Handle cloning, checkout, and submodule updates for a repository."""
        repo_url = repo['repo_url']
        branch = repo['branch']

        repo_name = repo_url.split('/')[-1].replace('.git', '')
        
        # Step 1: Clone the repository
        self.clone_repository(repo_url, repo_name)
        
        # Step 2: Checkout and pull the specified branch
        self.checkout_and_pull(repo_name, branch)

        # Step 3: Initialize and update submodules if the .gitmodules file exists
        if self.initialize_submodules(repo_name):
            log.info(f"Submodules initialized for {repo_name}, updating submodules...")
        else:
            log.info(f"No submodules to process for {repo_name} or they are already initialized.")

    def process_all_repositories(self, json_file):
        """
        Process all repositories concurrently by reading a JSON file.
        Graceful error handling for file not found and JSON parsing issues.
        """
        try:
            with open(json_file) as f:
                data = json.load(f)
        except FileNotFoundError as e:
            log.error(f"JSON file not found: {json_file}. Please provide a valid file path.")
            return
        except json.JSONDecodeError as e:
            log.error(f"Error parsing JSON file {json_file}: {e}")
            log.error(f"Please check that the file is properly formatted.")
            return

        repositories = data['repositories']
        max_workers = min(32, multiprocessing.cpu_count() + 4)

        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            futures = [executor.submit(self.process_repository, repo) for repo in repositories]
            for future in as_completed(futures):
                try:
                    future.result()  # Wait for each to complete
                except Exception as e:
                    log.error(f"Error processing repository: {e}")

    def _get_repo_lock(self, repo_path):
        """Obtain or create a thread-safe lock for the repository."""
        with self.repo_lock_global:
            if repo_path not in self.repo_locks:
                self.repo_locks[repo_path] = RLock()
        return self.repo_locks[repo_path]


if __name__ == "__main__":
    manager = GitRepositoryManager(log_level=logging.INFO)  # Adjust log level if necessary
    manager.process_all_repositories('repositories.json')
