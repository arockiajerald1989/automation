def process_all_repositories(self, json_file):
    """
    Process all repositories listed in a JSON file concurrently.

    Args:
        json_file (str): Path to the JSON file containing repository details.
    """
    with open(json_file) as f:
        repositories = json.load(f)['repositories']
    max_workers = min(32, multiprocessing.cpu_count())
    failed_repos = []

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {
            executor.submit(self.process_repository, repo): repo
            for idx, repo in enumerate(repositories)
        }
        for future in as_completed(futures):
            repo = futures[future]
            try:
                future.result()
            except Exception as e:
                failed_repos.append(str(e))
                log.error(f"Error processing repository {repo['repo_url']}: {e}")

    if failed_repos:
        log.error(f"Failed to process the following repositories: {failed_repos}")

    self.save_processed_repos()
