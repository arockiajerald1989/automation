import subprocess
import json
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import RLock, Lock
import logging
import multiprocessing
import time
import shlex
import shutil
from datetime import datetime

# Set up logging to log to both console and file
log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)


class GitRepositoryManager:
    """
    A class to manage multiple Git repositories, including cloning, checking out branches,
    pulling updates, and handling submodules with concurrency support.

    Attributes:
        repo_locks (dict): Dictionary of repository paths with their corresponding RLocks.
        repo_lock_global (Lock): A global lock to manage access to the repo_locks dictionary.
        timeout (int): Maximum time in seconds allowed for a command before timeout.
        retries (int): Number of retries for a command upon failure.
    """

    def __init__(self, log_level=logging.INFO, timeout=120, retries=3, log_file='git_repository_manager.log'):
        self.repo_locks = {}
        self.repo_lock_global = Lock()
        self.timeout = timeout
        self.retries = retries
        self.processed_repos = set()  # Track already processed repositories
        log.setLevel(log_level)

        # Create handlers: one for console and one for file
        console_handler = logging.StreamHandler()
        file_handler = logging.FileHandler(log_file)

        # Set level for handlers
        console_handler.setLevel(logging.INFO)  # Only show INFO and higher in console
        file_handler.setLevel(logging.DEBUG)  # Capture DEBUG and higher in log file

        # Define log format
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - [%(threadName)s] - %(message)s')

        # Add formatters to handlers
        console_handler.setFormatter(formatter)
        file_handler.setFormatter(formatter)

        # Add handlers to the logger
        log.addHandler(console_handler)
        log.addHandler(file_handler)

    def run_command(self, cmd, cwd=None, timeout=None):
        """
        Run a shell command with retries and exponential backoff.

        Args:
            cmd (str): Command to execute.
            cwd (str, optional): Directory to run the command in.
            timeout (int, optional): Command-specific timeout.

        Returns:
            str: Standard output from the command.

        Raises:
            RuntimeError: If the command fails after the specified retries.
        """
        attempt, backoff = 0, 1
        timeout = timeout or self.timeout  # Use command-specific timeout if provided
        while attempt < self.retries:
            try:
                log.debug(f"Running command: {cmd} in {cwd}")
                with subprocess.Popen(shlex.split(cmd), cwd=cwd, stdout=subprocess.PIPE,
                                      stderr=subprocess.PIPE) as process:
                    stdout, stderr = process.communicate(timeout=timeout)
                    if process.returncode != 0:
                        raise subprocess.CalledProcessError(process.returncode, cmd, stderr)
                log.debug(f"Command output: {stdout.decode().strip()}")
                return stdout.decode().strip()
            except subprocess.CalledProcessError as e:
                error_message = e.stderr.decode().strip()
                log.error(f"Command failed: {error_message} (Attempt {attempt + 1}/{self.retries})")
                if "fatal" in error_message.lower():
                    raise RuntimeError(f"Fatal error during execution: {cmd}")
            except subprocess.TimeoutExpired:
                log.error(f"Command timed out: {cmd} in {cwd}")
            except Exception as e:
                log.error(f"Unexpected error: {e}")
            attempt += 1
            if attempt >= self.retries:
                raise RuntimeError(f"Command failed after {self.retries} attempts: {cmd}")
            log.info(f"Retrying command after {backoff} seconds (Attempt {attempt}/{self.retries})...")
            time.sleep(backoff)
            backoff *= 2

    def get_current_branch(self, repo_path):
        """
        Retrieve the current branch of a repository.

        Args:
            repo_path (str): Path to the repository.

        Returns:
            str: Current branch name or commit hash if detached.
        """
        try:
            return self.run_command("git symbolic-ref --short HEAD", cwd=repo_path)
        except RuntimeError:
            detached_head = self.run_command("git rev-parse --short HEAD", cwd=repo_path)
            log.info(f"Repository {repo_path} is in detached HEAD state. Current commit: {detached_head}")
            return detached_head

    def is_up_to_date(self, repo_path):
        """
        Check if the repository is up-to-date with its remote.

        Args:
            repo_path (str): Path to the repository.

        Returns:
            bool: True if the repository is up-to-date, False otherwise.
        """
        try:
            return self.run_command("git rev-parse @", cwd=repo_path) == self.run_command("git rev-parse @{u}",
                                                                                          cwd=repo_path)
        except subprocess.CalledProcessError as e:
            log.warning(e.stderr.decode().strip())
            return False

    def clone_repository(self, repo_url, repo_name, branch, depth=1):
        """
        Clone a Git repository if it does not already exist locally.

        Args:
            repo_url (str): URL of the repository.
            repo_name (str): Local name of the repository.
            branch (str): Branch to clone.
            depth (int, optional): Depth of the clone for shallow cloning.
        """
        repo_git_path = os.path.join(repo_name, ".git")
        if not os.path.exists(repo_git_path):
            log.info(f"Cloning {repo_url} (branch: {branch})")
            depth_arg = f"--depth {depth}" if depth else ""
            try:
                self.run_command(f"git clone {depth_arg} --branch {branch} --single-branch {repo_url}")
            except RuntimeError:
                shutil.rmtree(repo_name, ignore_errors=True)
                raise
        else:
            log.info(f"Repository {repo_name} already exists. Skipping clone.")
            if not self.is_up_to_date(repo_name):
                log.info(f"Repository {repo_name} is not up to date. Attempting to pull latest changes.")
                self.run_command(f"git pull origin {branch}", cwd=repo_name)

    def checkout_and_pull(self, repo_path, branch):
        """
        Check out a branch in the repository and pull the latest changes if not up-to-date.

        Args:
            repo_path (str): Path to the repository.
            branch (str): Branch to check out.
        """
        with self._get_repo_lock(repo_path):
            current_branch = self.get_current_branch(repo_path)
            if current_branch != branch and not self.run_command(f"git branch --list {branch}", cwd=repo_path):
                log.error(f"Branch {branch} does not exist in {repo_path}. Attempting to fetch from remote.")
                self.run_command(f"git fetch origin {branch}", cwd=repo_path)
            if current_branch != branch:
                self.run_command(f"git checkout {branch}", cwd=repo_path)
            if not self.is_up_to_date(repo_path):
                self.run_command(f"git pull origin {branch}", cwd=repo_path)

    def initialize_submodules(self, repo_path):
        """
        Initialize and update submodules of a repository if present.

        Args:
            repo_path (str): Path to the repository.

        Returns:
            bool: True if submodules were initialized, False otherwise.
        """
        if not os.path.exists(os.path.join(repo_path, '.gitmodules')):
            log.info(f"No submodules to initialize in {repo_path}")
            return False

        log.info(f"Initializing submodules for {repo_path}")
        log.debug(f"Checking submodule status in {repo_path}")
        status_output = self.run_command("git submodule status", cwd=repo_path)
        log.debug(f"Submodule status for {repo_path}: {status_output}")

        log.info(f"Updating submodules for {repo_path}")
        with ThreadPoolExecutor(max_workers=4) as executor:  # Parallelize submodule updates
            executor.submit(self.run_command, "git submodule update --init --recursive --jobs 4", cwd=repo_path)
        log.info(f"Submodules initialized and updated for {repo_path}")

        return True

    def update_submodule(self, repo_path, submodule, branch="main"):
        """
        Update a specific submodule to the latest version on a specified branch.

        Args:
            repo_path (str): Path to the repository.
            submodule (str): Name of the submodule.
            branch (str): Branch to update the submodule to.
        """
        submodule_path = os.path.join(repo_path, submodule.split()[1])
        lock_file = os.path.join(repo_path, f".git/modules/{submodule_path}/index.lock")

        log.info(f"Checking and updating submodule {submodule} in {repo_path}")

        with self._get_repo_lock(submodule_path):
            if os.path.exists(lock_file):
                log.info(f"Removing lock file {lock_file}")
                os.remove(lock_file)

            if not os.path.isdir(os.path.join(submodule_path, ".git")):
                log.warning(f"Submodule directory {submodule_path} is missing, forcing reinitialization")
                shutil.rmtree(submodule_path, ignore_errors=True)
                self.run_command("git submodule update --init --recursive --force", cwd=repo_path)

            log.debug(f"Fetching remote branches for submodule {submodule} in {repo_path}")
            if self.run_command(f"git ls-remote --heads origin {branch}", cwd=submodule_path):
                log.info(f"Checking out branch {branch} for submodule {submodule}")
                self.run_command(f"git checkout {branch}", cwd=submodule_path)

            if not self.is_up_to_date(submodule_path):
                log.info(f"Pulling latest changes for submodule {submodule} on branch {branch}")
                self.run_command(f"git pull origin {branch}", cwd=submodule_path)
            else:
                log.info(f"Submodule {submodule} is already up to date on branch {branch}")

    def process_repository(self, repo):
        """
        Process a repository by cloning, checking out, pulling, and initializing submodules.

        Args:
            repo (dict): Dictionary containing repository details.
        """
        repo_url = repo['repo_url']
        branch = repo['branch']
        repo_name = repo_url.split('/')[-1].replace('.git', '')
        timeout = repo.get('timeout', self.timeout)  # Allow per-repository timeout
        retries = repo.get('retries', self.retries)  # Allow per-repository retries

        if repo_name in self.processed_repos:  # Skip already processed repositories
            log.info(f"Repository {repo_name} already processed. Skipping.")
            return

        log.info(f"Processing repository: {repo_name} (branch: {branch})")
        self.clone_repository(repo_url, repo_name, branch)
        self.checkout_and_pull(repo_name, branch)
        self.initialize_submodules(repo_name)

        self.processed_repos.add(repo_name)  # Mark the repository as processed

    def process_all_repositories(self, json_file):
        """
        Process all repositories listed in a JSON file using concurrent threads.

        Args:
            json_file (str): Path to the JSON file containing repository details.
        """
        with open(json_file) as f:
            repositories = json.load(f)['repositories']
        max_workers = min(32, multiprocessing.cpu_count())
        failed_repos = []  # Track repositories that fail processing

        with ThreadPoolExecutor(max_workers=max_workers, thread_name_prefix="RepoWorker") as executor:
            futures = [executor.submit(self.process_repository, repo) for repo in repositories]
            for future in as_completed(futures):
                try:
                    future.result()
                except Exception as e:
                    failed_repos.append(str(e))
                    log.error(f"Error processing repository: {e}")
        if failed_repos:
            log.error(f"Failed to process the following repositories: {failed_repos}")

    def _get_repo_lock(self, repo_path):
        """
        Retrieve a lock for the specified repository path, creating one if necessary.

        Args:
            repo_path (str): Path to the repository.

        Returns:
            RLock: Reentrant lock for the repository path.
        """
        with self.repo_lock_global:
            if repo_path not in self.repo_locks:
                self.repo_locks[repo_path] = RLock()
        return self.repo_locks[repo_path]


if __name__ == "__main__":
    manager = GitRepositoryManager(log_level=logging.DEBUG, timeout=120, retries=3, log_file='git_repo_manager.log')
    manager.process_all_repositories('repositories.json')
