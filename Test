import subprocess
import json
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import RLock, Lock
import logging
import multiprocessing
import time
import shlex
import shutil

# Setup logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

class GitRepositoryManager:
    def __init__(self, log_level=logging.INFO, timeout=120, retries=3):
        """
        Initialize locks for thread safety and set log level, timeout, and retries.
        """
        self.repo_locks = {}
        self.repo_lock_global = Lock()
        self.timeout = timeout
        self.retries = retries
        log.setLevel(log_level)

    def run_command(self, cmd, cwd=None):
        """
        Run a shell command with retries and exponential backoff, including handling timeouts.
        """
        attempt = 0
        backoff = 1  # initial backoff time in seconds

        while attempt < self.retries:
            try:
                log.debug(f"Running command: {cmd} in {cwd}")
                process = subprocess.run(shlex.split(cmd), check=True, cwd=cwd, stdout=subprocess.PIPE,
                                         stderr=subprocess.PIPE, timeout=self.timeout)
                output = process.stdout.decode().strip()
                log.info(f"Successfully executed command: {cmd}")
                return output
            except subprocess.CalledProcessError as e:
                log.error(f"Error executing command: {cmd}. Attempt {attempt + 1} of {self.retries}")
                log.error(f"Command failed with error: {e.stderr.decode().strip()}")
            except subprocess.TimeoutExpired as e:
                log.error(f"Command timed out: {cmd} in {cwd}. Attempt {attempt + 1} of {self.retries}")

            # Increment attempt and check if retries are exhausted
            attempt += 1
            if attempt >= self.retries:
                log.error(f"Command failed after {self.retries} attempts: {cmd}")
                raise RuntimeError(f"Command failed after {self.retries} attempts: {cmd}")
            else:
                log.info(f"Retrying command after {backoff} seconds...")
                time.sleep(backoff)  # Wait for a backoff period before retrying
                backoff *= 2  # Exponential backoff

    def get_current_branch(self, repo_path):
        """Get the current branch or commit hash if in detached HEAD."""
        try:
            # Try to get the symbolic branch name
            cmd = "git symbolic-ref --short HEAD"
            return self.run_command(cmd, cwd=repo_path)
        except RuntimeError as e:
            # If it fails, likely a detached HEAD, so fall back to the commit hash
            log.warning(f"Detached HEAD state in {repo_path}. Falling back to commit hash.")
            cmd = "git rev-parse --short HEAD"
            return self.run_command(cmd, cwd=repo_path)

    def is_up_to_date(self, repo_path, branch):
        """
        Check if the repository or submodule is up to date with its upstream.
        """
        try:
            local_commit = self.run_command("git rev-parse @", cwd=repo_path)
            upstream_commit = self.run_command("git rev-parse @{u}", cwd=repo_path)
            return local_commit == upstream_commit
        except subprocess.CalledProcessError as e:
            if "no upstream" in e.stderr.decode():
                log.warning(f"No upstream configured for {branch} in {repo_path}")
            else:
                log.warning(f"Failed to check upstream status for {branch}: {e.stderr.decode().strip()}")
            return False

    def clone_repository(self, repo_url, repo_name, branch, depth=1):
        """
        Clone the repository if it doesn't exist, with shallow cloning by default (--depth 1).
        """
        if not os.path.exists(repo_name):
            log.info(f"Cloning the repository: {repo_url} (branch: {branch})")
            depth_arg = f"--depth {depth}" if depth else ""
            try:
                self.run_command(f"git clone {depth_arg} --branch {branch} --single-branch {repo_url}")
            except RuntimeError:
                log.error(f"Clone failed for {repo_name}. Removing directory and retrying...")
                shutil.rmtree(repo_name, ignore_errors=True)
                raise
        else:
            log.info(f"Repository {repo_name} already exists. Skipping clone.")

    def checkout_and_pull(self, repo_path, branch):
        """
        Checkout and pull the branch if not up to date, using locks for thread safety.
        """
        with self._get_repo_lock(repo_path):
            current_branch = self.get_current_branch(repo_path)
            if current_branch != branch:
                log.info(f"Checking out branch {branch} in {repo_path} (currently on {current_branch})")
                self.run_command(f"git checkout {branch}", cwd=repo_path)

            if not self.is_up_to_date(repo_path, branch):
                log.info(f"Pulling latest changes for branch {branch} in {repo_path}")
                self.run_command(f"git pull origin {branch}", cwd=repo_path)
            else:
                log.info(f"Branch {branch} in {repo_path} is up to date. Skipping pull.")

    def initialize_submodules(self, repo_path):
        """
        Initialize and update submodules in parallel. Handles submodules based on .gitmodules file.
        """
        submodule_config = os.path.join(repo_path, '.gitmodules')
        if not os.path.exists(submodule_config):
            log.info(f"No submodules found in {repo_path}.")
            return False

        # Initialize submodules
        self.run_command("git submodule update --init --recursive --jobs 4", cwd=repo_path)

        # Get list of submodules to update
        submodules = self.run_command("git submodule status", cwd=repo_path).splitlines()

        # Run submodule updates in parallel
        log.info(f"Updating submodules in parallel for {repo_path}")
        max_workers = min(4, multiprocessing.cpu_count())  # Adjust workers based on CPU count
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            futures = [executor.submit(self.update_submodule, repo_path, submodule) for submodule in submodules]
            for future in as_completed(futures):
                try:
                    future.result()  # Wait for each submodule update to complete
                except Exception as e:
                    log.error(f"Error updating submodule in {repo_path}: {e}")

        return True

    def update_submodule(self, repo_path, submodule, branch="main"):
        """Update a specific submodule, ensuring it's checked out to a branch."""
        submodule_path = submodule.split()[1]  # Get submodule path from 'git submodule status' output
        submodule_full_path = os.path.join(repo_path, submodule_path)

        with self._get_repo_lock(submodule_full_path):
            log.info(f"Processing submodule at {submodule_full_path}")
            current_branch = self.get_current_branch(submodule_full_path)

            # Check if submodule is in a detached HEAD state
            if "detached" in current_branch or "HEAD" in current_branch:
                log.info(f"Submodule at {submodule_full_path} is in detached HEAD state. Checking out branch {branch}.")
                # Checkout to the desired branch in the submodule
                self.run_command(f"git checkout {branch}", cwd=submodule_full_path)

            if not self.is_up_to_date(submodule_full_path, branch):
                log.info(f"Pulling latest changes for submodule {submodule_full_path} on branch {branch}")
                self.run_command(f"git pull origin {branch}", cwd=submodule_full_path)
            else:
                log.info(f"Submodule {submodule_full_path} is up to date.")

    def process_repository(self, repo):
        """Handle cloning, checkout, and submodule updates for a repository."""
        repo_url = repo['repo_url']
        branch = repo['branch']

        repo_name = repo_url.split('/')[-1].replace('.git', '')

        # Step 1: Clone the repository
        self.clone_repository(repo_url, repo_name, branch)

        # Step 2: Checkout and pull the specified branch
        self.checkout_and_pull(repo_name, branch)

        # Step 3: Initialize and update submodules if the .gitmodules file exists
        if self.initialize_submodules(repo_name):
            log.info(f"Submodules initialized for {repo_name}, updating submodules...")
        else:
            log.info(f"No submodules to process for {repo_name} or they are already initialized.")

    def process_all_repositories(self, json_file):
        """
        Process all repositories concurrently by reading a JSON file.
        """
        try:
            with open(json_file) as f:
                data = json.load(f)
        except FileNotFoundError:
            log.error(f"JSON file not found: {json_file}. Please provide a valid file path.")
            return
        except json.JSONDecodeError as e:
            log.error(f"Error parsing JSON file {json_file}: {e}")
            return

        repositories = data['repositories']
        max_workers = min(32, multiprocessing.cpu_count() + 4)

        try:
            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                futures = [executor.submit(self.process_repository, repo) for repo in repositories]
                for future in as_completed(futures):
                    try:
                        future.result()  # Wait for each repository to complete
except Exception as e:
                        log.error(f"Error processing repository: {e}")
        except KeyboardInterrupt:
            log.error("Process interrupted. Shutting down gracefully...")
            executor.shutdown(wait=True)

    def _get_repo_lock(self, repo_path):
        """Obtain or create a thread-safe lock for the repository."""
        with self.repo_lock_global:
            if repo_path not in self.repo_locks:
                self.repo_locks[repo_path] = RLock()
        return self.repo_locks[repo_path]


if __name__ == "__main__":
    # Example of how to use the GitRepositoryManager
    manager = GitRepositoryManager(log_level=logging.INFO, timeout=120, retries=3)  # Adjust timeout and retries if necessary
    manager.process_all_repositories('repositories.json')  # Provide your repositories.json file path

